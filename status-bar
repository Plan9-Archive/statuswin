#!/usr/bin/env ruby
# frozen_string_literal: true

PROG = 'status-bar'

class AbstractMonitor
  attr_reader :title, :display

  def initialize(title, delay: 60)
    @title = title
    @delay = delay
    @value = nil
    @display = nil

    Thread.new do
      loop do
        if is_out_of_date?
          @value = compute
          @compute_time = Time.now
        end
        @display = if @value.nil?
                     nil
                   else
                     "#{@title}#{@value}"
                   end
        sleep(1)
      end
    end
  end

  def sh(cmd)
    out = `#{cmd}`.chomp
    if $?.exitstatus != 0
      warn "error code #{$?.exitstatus} running: #{cmd}: #{out}"
      out = 'error'
    end
    out if out.length > 0
  end

  private

  def is_out_of_date?
    @compute_time.nil? || (Time.now - @compute_time >= @delay)
  end
end

class Repos < AbstractMonitor
  def initialize(title, delay)
    super(title, delay: delay)
  end

  def compute
    sh 'repos --behind'
  end
end

class Secrets < AbstractMonitor
  def initialize(title, delay)
    super(title, delay: delay)
  end

  def compute
    sh 'secrets'
  end
end

class Security < AbstractMonitor
  def initialize(title, delay)
    super(title, delay: delay)
  end

  def compute
    sh 'security -q'
  end
end

class GoogleCloud < AbstractMonitor
  def initialize(title, delay)
    super(title, delay: delay)
  end

  def compute
    sh 'gcloud2 status'
  end
end

class TimeMonitor < AbstractMonitor
  def initialize(title, delay: 10)
    super(title, delay: delay)
  end

  def compute
    # Time.now.strftime('%a %d %b %H:%M')
    Time.now.strftime('%a %H:%M')
  end
end

class MemoryMonitor < AbstractMonitor
  def initialize(title, delay: 30, visibility: 0)
    super(title, delay: delay)
    @visibility = visibility
  end

  def compute
    ## TODO - use /proc/meminfo
    reading = `free -m`
    total, used, free, shared, buf_cache, available = reading[/Mem:(.+)/, 1].split
    # puts total, used, free, shared, buf_cache, available
    # swap = reading[/Swap:(.+)/, 1].split[1]
    percent_used = (100 * (total.to_f - available.to_f) / total.to_f).floor
    if percent_used > @visibility
      "#{percent_used}%"
    end
  end
end

class DiskMonitor < AbstractMonitor
  def initialize(title, delay: 30, visibility: 0)
    super(title, delay: delay)
    @visibility = visibility
  end

  def compute
    reading = `df /home`
    fs, blocks, used, avail, percentage, mnt = reading[%r{/dev.*}].split
    percent_used = percentage[/\d+/].to_i
    if percent_used > @visibility
      "#{percent_used}%"
    end
  end
end

class Top < AbstractMonitor
  def initialize(title, delay: 10, visibility: 0)
    super(title, delay: delay)
    @visibility = visibility
    @cpus = 1
    @t = Thread.new { run_top }
  end

  def compute
    top_command_name = (@t['top_command_name'] || '?')
    top_command_cpu = (@t['top_command_cpu'] || 0)
    total_cpu = (@t['total_cpu'] || 0)
    if total_cpu >= @visibility
      "#{top_command_name} #{top_command_cpu} / #{total_cpu}"
    end
  end

  def run_top
    Thread.current['top_command_name'] = '?'
    Thread.current['top_command_cpu'] = 0
    Thread.current['total_cpu'] = 0

    top_delay = @delay > 5 ? (top_delay.to_f / 2).round : @delay
    cmd = "top -b -i -d #{top_delay}"
    IO.popen(cmd) do |subprocess|
      procs = {}
      procs_count = {}

      while s = subprocess.readline
        if s =~ /^ *[0-9]+ /
          top_process = s
          # puts top_process.split
          pid, user, pr, ni, virt, res, shr, s, cpu, mem, time, command = top_process.split
          cpu = cpu.to_f

          if procs[command].nil?
            procs[command] = 0
            procs_count[command] = 0
          end
          procs[command] = procs[command] + cpu
          procs_count[command] += 1
        elsif s =~ /^$/
          unless procs.empty?
            command, cpu = procs.entries.min { |a, b| b[1] <=> a[1] }

            command += "[#{procs_count[command]}]" if procs_count[command] > 1

            Thread.current['top_command_name'] = command
            Thread.current['top_command_cpu'] = (cpu.to_f / @cpus).round
          end

          procs = {}
          procs_count = {}
        elsif s =~ /^.Cpu/
          cpu_line = s.chomp
          rx = /%Cpu\(s\): *([\d.]+) *us, *([\d.]+) *sy, *([\d.]+) *ni, *([\d.]+) *id, *([\d.]+) *wa, *([\d.]+) *hi, *([\d.]+) *si, *([\d.]+) *st/
          us, sy, ni, id, wa, hi, si, st = cpu_line.scan(rx).first
          if us.nil?
            warn "unable to match on line: '#{cpu_line}'"
            total_cpu = 99
          else
            total_cpu = (us.to_f + sy.to_f + ni.to_f).round
          end

          Thread.current['total_cpu'] = total_cpu
        end
      end
    end
  end
end

class BatteryMonitor < AbstractMonitor
  def initialize title, delay: 120
    super(title, delay: delay)
    @enabled = File.exists? "/usr/bin/acpi"
  end

  def compute
    return unless @enabled
    reading = sh("acpi -b")
    if matches = reading.match(/Battery 0: ([^,]+), (\d+%), (.*)$/)
      state_s = matches[1]
      level_s = matches[2][/\d+/]
      duration_s = matches[3]

      state = case state_s
        when "Charging"
          "C "
        when "Discharging"
          "D "
        else
          ""
        end

      duration = (duration_s != "0:00" and state_s =~ /(Disc|C)harging/) ? " (#{duration})" : ""
      if duration_s =~ /zero rate/
        level = "full"
        duration = ""
      end
      duration = duration_s.sub(" remaining", "").sub(" until charged", "")
      duration = duration.sub(/(..:..):../, '\1')
      if level == "full"
        nil
      else
	if state == "D" and level_s.to_i > 0 and level_s.to_i < 5
		system "sudo poweroff < /dev/null > /dev/null"
	end
        "#{level_s}% #{state}#{level}#{duration}"
        "#{level_s}% #{state}"
      end
    end
  end
end

class WifiMonitor < AbstractMonitor
  def initialize title, delay: 10, visibility: 0, interface: "wlan0"
    super(title, delay: delay)
    @visibility = visibility
    @interface = interface
    @site = "google.com"
    @ping_thread = Thread.new { run_ping }
  end

  def compute
    reading = `iw dev #{@interface} link 2>&1`
    alive = reading.match /SSID:/
    if alive
      signal = `iw dev #{@interface} link`.match(/signal: -(\d+)/)[1].to_i
      @quality = ((90-signal)*100/60).floor
      @ssid =  reading.match(/SSID: ([^ ]+)$/)[1]
      connected = @ping_thread["connected"]
      if @quality < @visibility or not connected
        "#{@ssid}: #{connected ? ' ' : '!'}#{@quality}%"
      end
    else
      "#{@interface}: off"
    end
  end

  def run_ping
    Thread.current["connected"] = true

    cmd = "ping -i#{@delay} #{@site} 2>&1"
    loop do
      begin
        IO.popen(cmd) do |subprocess|
          while s = subprocess.readline
            if s =~ /bytes from/
              Thread.current["connected"] = true
            else
              Thread.current["connected"] = false
            end
          end
        end
      rescue
        # Nothing
      end
      Thread.current["connected"] = false
      sleep(@delay)
    end
  end
end

class ThermalMonitor < AbstractMonitor
  def initialize title, delay: 30, visibility: 50
    super(title, delay: delay)
    @visibility = visibility
    @enabled = File.exists? "/usr/bin/acpi"
  end

  def compute
    return unless @enabled
    reading = `acpi -t`
    @temp = reading[/, (\d+)/, 1].to_i
    "#{@temp}C" if @temp > @visibility
  end
end

class VolumeMonitor < AbstractMonitor
  def initialize title, delay: 10, channel: "Master"
    super(title, delay: delay)
    @channel = channel
    @enabled = File.exists? "/dev/snd/by-path"
  end

  def compute
    return unless @enabled
    reading = sh "amixer get #{@channel}"
    volume = reading[/\d+%/].to_i
    mute = reading[/\[(on|off)\]/, 1] == "on" ? "" : "-"
    "#{mute}#{volume}%"
  end
end

class BrightnessMonitor < AbstractMonitor
  SCRIPT = "laptop brightness"

  def initialize title, delay: 10
    super(title, delay: delay)
    @max_level = sh("#{SCRIPT} max").to_i
  end

  def compute
    reading = sh("#{SCRIPT} value").chomp.to_i or 0
    perc = (100 * reading / @max_level).floor
    "#{perc}%"
  end
end

class ArchMonitor < AbstractMonitor
  def initialize title, delay: 600, visibility: 0
    super(title, delay: delay)
    @visibility = visibility
  end

  def compute
    reading = `sudo pacman -Syu < /dev/null 2> /dev/null`
    packages = reading[/^Packages \((\d+)\)/, 1].to_i
    "#{packages} updates" if packages >= @visibility
  end
end

$MODES = {
  'statuswin' => {
    'colorised' => false,
    'formatter' => lambda { |values|
      File.open("/var/tmp/#{PROG}-statuswin.out", 'w') do |f|
        f.write values.join("\n") + "\n"
      end
    }
  }
}

user = `whoami`.chomp
if user == 'root'
  puts 'refusing to run as root, aborting'
  exit 2
end

mode = ARGV[0]
config = $MODES[ARGV[0]]
unless config
  puts "Usage: $0 (#{$MODES.keys.join('|')})"
  exit 2
end

formatter = config['formatter']

monitors = [
  TimeMonitor.new('', delay: 10),
  ArchMonitor.new("arch: ", delay: 3600, visibility: 50),
  VolumeMonitor.new("vol: ", delay: 2, channel: 'Master'),
  # BrightnessMonitor.new("lcd: ", delay: 2),
  WifiMonitor.new("", delay: 5, visibility: 35, interface: "wlo1"),
  # ThermalMonitor.new("temp: ", delay: 10, visibility: 55),
  BatteryMonitor.new("batt: ", delay: 30),
  # Top.new('', delay: 2, visibility: 30),
  Security.new('security: ', 60 * 60),
  Secrets.new('', 120),
  Repos.new('git: ', 120),
  GoogleCloud.new('gcp: ', 180),
  DiskMonitor.new('disk: ', delay: 120, visibility: 70),
  MemoryMonitor.new('ram: ', delay: 30, visibility: 80),
]

pids = `pgrep -f "ruby .*#{PROG} +#{mode}"`.split.reject { |pid| pid == $$.to_s }
pids.collect { |pid| system "kill #{pid}" }

loop do
  values = monitors.map do |monitor|
    begin
      monitor.display
    rescue StandardError
      puts "#{monitor} error: #{$ERROR_INFO}"
      "#{monitor} ERROR"
    rescue StandardError
      puts $ERROR_INFO
      "#{monitor} ERROR"
    end
  end
  # Remove nil values
  values = values.reject(&:nil?)

  formatter.call(values)
  sleep(1)
end
